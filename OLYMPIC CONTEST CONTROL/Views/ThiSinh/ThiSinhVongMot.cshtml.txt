@{
    ViewBag.Title = "Thí sinh - Vòng thi";
}

<style>
    body {
        background: linear-gradient(135deg, #f8f9fa 0%, #e8f5e9 100%);
        min-height: 100vh;
        font-family: 'Roboto', sans-serif;
        margin: 0;
        padding: 0;
    }

    .contest-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 30px 20px;
    }

    .welcome-section {
        background: white;
        border-radius: 20px;
        padding: 25px 30px;
        margin-bottom: 30px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
        border-left: 5px solid #4caf50;
        text-align: center;
    }

    .welcome-text {
        color: #2e7d32;
        font-size: 1.4rem;
        font-weight: 600;
        margin: 0;
    }

    .contest-area {
        background: white;
        border-radius: 20px;
        padding: 40px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
        border: 3px solid transparent;
        transition: all 0.3s ease;
        margin-bottom: 30px;
    }

        .contest-area:hover {
            border-color: #4caf50;
            transform: translateY(-2px);
        }

    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 2px solid #e8f5e9;
    }

    .question-number {
        background: linear-gradient(135deg, #4caf50 0%, #2e7d32 100%);
        color: white;
        padding: 12px 25px;
        border-radius: 50px;
        font-size: 1.1rem;
        font-weight: 700;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }

    .timer-display {
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
        color: white;
        padding: 12px 25px;
        border-radius: 50px;
        font-size: 1.1rem;
        font-weight: 700;
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
        animation: pulse 1s infinite;
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.02);
        }

        100% {
            transform: scale(1);
        }
    }

    .question-content {
        background: #f8f9fa;
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 30px;
        border-left: 5px solid #4caf50;
        position: relative;
    }

    .question-text {
        font-size: 1.3rem;
        color: #2e7d32;
        font-weight: 600;
        line-height: 1.6;
        margin: 0;
    }

    .answers-section {
        margin-bottom: 30px;
    }

    .answers-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 20px;
        margin-bottom: 25px;
    }

    .answer-button {
        background: white;
        border: 3px solid #e8f5e9;
        color: #2e7d32;
        padding: 20px 25px;
        border-radius: 15px;
        font-size: 1.1rem;
        font-weight: 600;
        text-align: left;
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
        overflow: hidden;
        min-height: 80px;
        display: flex;
        align-items: center;
    }

        .answer-button:hover:not(:disabled) {
            border-color: #4caf50;
            background: #e8f5e9;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(76, 175, 80, 0.2);
        }

        .answer-button:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

        .answer-button.selected {
            border-color: #ffc107;
            background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
            color: #856404;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 193, 7, 0.3);
        }

        .answer-button.correct {
            border-color: #4caf50 !important;
            background: linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%) !important;
            color: #2e7d32 !important;
            font-weight: bold;
            animation: correctPulse 0.5s ease-in-out;
        }

    @@keyframes correctPulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.02);
        }

        100% {
            transform: scale(1);
        }
    }

    .explanation-box {
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        border: 2px solid #2196f3;
        border-radius: 15px;
        padding: 20px;
        margin-top: 20px;
        color: #1565c0;
        font-style: italic;
        font-weight: 500;
        box-shadow: 0 4px 15px rgba(33, 150, 243, 0.2);
    }

    .summary-section {
        background: white;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
        margin-top: 30px;
    }

    .summary-title {
        color: #2e7d32;
        font-size: 1.8rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 25px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .results-table {
        background: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .table {
        margin-bottom: 0;
    }

        .table thead th {
            background: linear-gradient(135deg, #4caf50 0%, #2e7d32 100%);
            color: white;
            border: none;
            padding: 15px;
            font-weight: 600;
            text-align: center;
        }

        .table tbody td {
            padding: 12px 15px;
            border-color: #e8f5e9;
            vertical-align: middle;
        }

        .table tbody tr:hover {
            background-color: #f8f9fa;
        }

    .status-indicator {
        background: white;
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        text-align: center;
    }

    .status-text {
        color: #666;
        font-size: 1.1rem;
        font-weight: 500;
    }

    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid #e8f5e9;
        border-radius: 50%;
        border-top-color: #4caf50;
        animation: spin 1s ease-in-out infinite;
        margin-right: 10px;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    .detail-item {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 8px 12px;
        margin: 4px 0;
        font-size: 0.9rem;
        border-left: 3px solid #4caf50;
    }

    @@media (max-width: 768px) {
        .contest-container {
            padding: 15px 10px;
        }

        .contest-area {
            padding: 25px 20px;
        }

        .question-header {
            flex-direction: column;
            gap: 15px;
        }

        .answers-grid {
            grid-template-columns: 1fr;
        }

        .question-text {
            font-size: 1.1rem;
        }

        .answer-button {
            padding: 15px 20px;
            font-size: 1rem;
        }
    }
</style>

<div class="contest-container">
    <!-- Welcome Section -->
    <div class="welcome-section">
        @if (Session["FullName"] != null)
        {
            <p class="welcome-text">
                <i class="fas fa-user-graduate"></i> Chào mừng, @Session["FullName"]!
            </p>
        }
    </div>

    <!-- Contest Area -->
    <div id="contestArea" class="contest-area">
        <div class="question-header">
            <div class="question-number">
                <i class="fas fa-question-circle"></i> Câu hỏi <span id="questionIndex">--</span>/10
            </div>
            <div class="timer-display">
                <i class="fas fa-clock"></i> Thời gian: <span id="timer">--</span>s
            </div>
        </div>

        <div class="question-content">
            <p class="question-text" id="questionText">
                <i class="fas fa-spinner loading-spinner"></i> Đang chờ bắt đầu vòng thi...
            </p>
        </div>

        <div class="answers-section">
            <div class="answers-grid" id="answerList">
                <!-- Answer buttons will be dynamically generated here -->
            </div>
        </div>

        <div class="explanation-box" id="explanationBox" style="display:none;">
            <i class="fas fa-lightbulb"></i> <span id="explanationText"></span>
        </div>
    </div>

    <!-- Summary Section -->
    <div id="summaryBox" class="summary-section" style="display:none;">
        <!-- Summary content will be dynamically generated here -->
    </div>

    <!-- Status Indicator -->
    <div class="status-indicator">
        <div class="status-text">
            <i class="fas fa-broadcast-tower"></i> Trạng thái: Đang kết nối với máy chủ
        </div>
    </div>
</div>

<script src="https://cdn.socket.io/4.6.1/socket.io.min.js"></script>
<script>
    const socket = io("http://localhost:3000");
    const userId = @Session["UserId"];

    let currentRound = 0;
    let currentIndex = 0;
    let currentQuestionId = null;
    let canAnswer = false;
    let timerInterval;
    let correctAnswer = null;
    let selectedAnswer = null;
    let startTime = null;
    let lastSelectedTime = null;

    function startTimer(seconds, questionId) {
        clearInterval(timerInterval);
        let timeLeft = seconds;
        startTime = Date.now();

        document.getElementById("timer").innerText = timeLeft;

        timerInterval = setInterval(() => {
            timeLeft--;
            document.getElementById("timer").innerText = timeLeft;

            if (timeLeft <= 5) {
                document.querySelector('.timer-display').style.background =
                    'linear-gradient(135deg, #ff4444 0%, #cc0000 100%)';
            }

            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                canAnswer = false;
                highlightCorrect();
                sendFinalAnswer();
            }
        }, 1000);
    }

    socket.emit("join-room", userId);

    socket.on('round-started', async (round) => {
        currentRound = round;
        currentIndex = 0;
        updateStatus(`Vòng ${round} đã bắt đầu!`);
        await loadQuestion(currentRound);
        canAnswer = false;
    });

    socket.on('show-question', async (round) => {
        currentRound = round;
        currentIndex = 0;
        updateStatus(`Hiển thị câu hỏi vòng ${round}`);
        await loadQuestion(currentRound);
        canAnswer = false;
    });

    socket.on("start-timer", ({ round, questionId }) => {
        if (round === currentRound) {
            canAnswer = true;
            selectedAnswer = null;
            currentQuestionId = questionId;
            updateStatus(`Bắt đầu làm bài - Câu hỏi ${questionId}`);
            startTimer(15, currentQuestionId);
        }
    });

    function updateStatus(message) {
        document.querySelector('.status-text').innerHTML =
            `<i class="fas fa-broadcast-tower"></i> ${message}`;
    }

    socket.on("summary-all-users", (data) => {
        // Ẩn khu vực làm bài
        document.getElementById("contestArea").style.display = "none";

        // Sắp xếp theo điểm cao nhất, rồi đến thời gian ít nhất
        data.sort((a, b) => {
            if (b.score !== a.score) return b.score - a.score;
            return a.totalTime - b.totalTime;
        });

        let html = `
    <h3 class="summary-title">
        <i class="fas fa-chart-bar"></i> 📊 Kết quả tổng hợp thí sinh
    </h3>
    <div class="results-table">
        <table class="table table-bordered table-hover align-middle">
            <thead>
                <tr>
                    <th>Xếp hạng</th>
                    <th>Tên thí sinh</th>
                    <th>Tổng câu</th>
                    <th>Đúng</th>
                    <th>Sai</th>
                    <th>Điểm</th>
                    <th>⏱ Thời gian (giây)</th>
                    <th>Chi tiết</th>
                </tr>
            </thead>
            <tbody>
    `;

        data.forEach((student, i) => {
            const totalTime = student.details.reduce((sum, d) => sum + (d.timeTaken || 0), 0);

            // Xác định icon hạng
            let rankIcon = i + 1;
            if (i === 0) rankIcon = '🏆';       // hạng nhất
            else if (i === 1) rankIcon = '🥈';  // hạng nhì
            else if (i === 2) rankIcon = '🥉';  // hạng ba

            const detailHtml = student.details.map(d => {
                const statusIcon = d.isCorrect ? '✅' : '❌';
                const statusClass = d.isCorrect ? 'text-success' : 'text-danger';
                return `<div class="detail-item ${statusClass}">
                        Câu ${d.index}: ${statusIcon} - 
                        Chọn: <strong>${d.selectedAnswer ?? 'Không chọn'}</strong>, 
                        Đúng: ${d.correctAnswer}, ⏱ ${d.timeTaken ?? "--"}s
                    </div>`;
            }).join("");

            html += `
        <tr>
            <td class="text-center fw-bold fs-5">${rankIcon}</td>
            <td class="fw-semibold">${student.fullName}</td>
            <td class="text-center">${student.total}</td>
            <td class="text-success text-center fw-bold">${student.correct}</td>
            <td class="text-danger text-center fw-bold">${student.total - student.correct}</td>
            <td class="fw-bold text-center text-primary fs-5">${student.score}</td>
            <td class="text-center text-primary fw-semibold">${totalTime}s</td>
            <td>${detailHtml}</td>
        </tr>
        `;
        });

        html += `
            </tbody>
        </table>
    </div>
    `;

        document.getElementById("summaryBox").innerHTML = html;
        document.getElementById("summaryBox").style.display = "block";
        updateStatus("Đã hiển thị kết quả tổng hợp");
    });


    async function loadQuestion(round) {
        clearInterval(timerInterval);
        try {
            const res = await fetch(`http://localhost:3000/api/questions/question/${round}/0`);
            if (!res.ok) {
                document.getElementById("questionText").innerHTML =
                    '<i class="fas fa-exclamation-triangle" style="color: #f44336;"></i> Không tải được câu hỏi.';
                return;
            }

            const q = await res.json();
            currentQuestionId = q.QuestionId;
            correctAnswer = q.CorrectAnswer;

            document.getElementById("questionIndex").innerText = round;
            document.getElementById("questionText").innerHTML =
                `<i class="fas fa-question-circle"></i> ${q.Content}`;

            const container = document.getElementById("answerList");
            container.innerHTML = ["A", "B", "C", "D"].map(opt => `
                <button id="btn_${opt}" class="answer-button" onclick="submitAnswer('${opt}', ${q.QuestionId})">
                    <strong>${opt}:</strong> ${q["Option" + opt]}
                </button>
            `).join("");

            document.getElementById("timer").innerText = "--";
            document.getElementById("explanationBox").style.display = "none";

            updateStatus(`Đã tải câu hỏi vòng ${round}`);
        } catch (err) {
            console.error("❌ Lỗi khi tải câu hỏi:", err);
            document.getElementById("questionText").innerHTML =
                '<i class="fas fa-exclamation-triangle" style="color: #f44336;"></i> Lỗi khi tải câu hỏi.';
        }
    }

    async function submitAnswer(answer, questionId) {
        if (!canAnswer) return;

        selectedAnswer = answer;
        lastSelectedTime = Date.now();

        // Highlight lựa chọn
        ["A", "B", "C", "D"].forEach(opt => {
            const btn = document.getElementById("btn_" + opt);
            if (btn) {
                btn.classList.remove('selected');
                if (opt === answer) {
                    btn.classList.add('selected');
                }
            }
        });

        document.getElementById("questionText").innerHTML =
            `<i class="fas fa-check-circle" style="color: #4caf50;"></i> Bạn đã chọn đáp án: <strong>${answer}</strong>`;

        updateStatus(`Đã chọn đáp án: ${answer}`);
    }

    async function sendFinalAnswer() {
        let timeTaken = 15;

        if (selectedAnswer !== null && lastSelectedTime !== null) {
            timeTaken = Math.floor((lastSelectedTime - startTime) / 1000);
        }

        try {
            await fetch('http://localhost:3000/api/answers', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    userId: userId,
                    questionId: currentQuestionId,
                    selectedAnswer: selectedAnswer,
                    timeTaken: timeTaken
                })
            });
            updateStatus("Đã gửi đáp án cuối cùng");
        } catch (err) {
            console.error("❌ Lỗi khi gửi đáp án:", err);
        }
    }

    function highlightCorrect() {
        if (!correctAnswer) return;
        const btn = document.getElementById("btn_" + correctAnswer);
        if (btn) {
            btn.classList.add("correct");
        }
    }

    socket.on("round-ended", (round) => {
        updateStatus(`Vòng ${round} đã kết thúc!`);
        setTimeout(() => {
            alert(`⏹ Vòng ${round} đã kết thúc!`);
        }, 500);
    });

    socket.on("display-results", () => {
        updateStatus("Đang hiển thị kết quả tổng kết...");
        setTimeout(() => {
            alert("📊 Tổng kết điểm sẽ hiển thị ở đây!");
        }, 500);
    });

    socket.on("clear-student-summary", () => {
        document.getElementById("summaryBox").innerHTML = "";
        document.getElementById("summaryBox").style.display = "none";
        document.getElementById("questionText").innerHTML =
            '<i class="fas fa-spinner loading-spinner"></i> Đang chờ bắt đầu...';
        document.getElementById("answerList").innerHTML = "";
        document.getElementById("timer").innerText = "--";
        document.getElementById("explanationBox").style.display = "none";
        document.getElementById("contestArea").style.display = "block";
        updateStatus("Đã khôi phục giao diện câu hỏi");
    });

    // Connection status
    socket.on('connect', () => {
        updateStatus('Đã kết nối với máy chủ');
    });

    socket.on('disconnect', () => {
        updateStatus('Mất kết nối với máy chủ');
    });
</script>