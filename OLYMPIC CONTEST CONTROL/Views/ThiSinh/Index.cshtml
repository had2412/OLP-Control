@{
    ViewBag.Title = "Thí sinh - Vòng thi";
}
@if (Session["FullName"] != null)
{
    <p>Chào mừng, @Session["FullName"]!</p>
}

<div id="contestArea">
    <h2>Câu hỏi <span id="questionIndex">--</span>/10</h2>
    <div id="questionText">Đang chờ bắt đầu...</div>
    <div id="answerList"></div>
    <h3>Thời gian còn lại: <span id="timer">--</span> giây</h3>
    <p id="explanationBox" style="display:none; font-style:italic; margin-top:10px; color:blue;"></p>
</div>

<div id="summaryBox" style="margin-top:20px;"></div>

<script src="https://cdn.socket.io/4.6.1/socket.io.min.js"></script>
<script>
    const socket = io("http://localhost:3000");
    const userId = @Session["UserId"];

    let currentRound = 0;
    let currentIndex = 0;
    let currentQuestionId = null;
    let canAnswer = false;
    let timerInterval;
    let correctAnswer = null;
    let selectedAnswer = null;

    socket.emit("join-room", userId);

    socket.on('round-started', async (round) => {
        currentRound = round;
        currentIndex = 0;
        await loadQuestion(currentRound);
        canAnswer = false;
    });

    socket.on('show-question', async (round) => {
        currentRound = round;
        currentIndex = 0;
        await loadQuestion(currentRound);
        canAnswer = false;
    });

    socket.on("start-timer", ({ round, questionId }) => {
        if (round === currentRound) {
            canAnswer = true;
            selectedAnswer = null;
            currentQuestionId = questionId;
            startTimer(15, currentQuestionId);
        }
    });

    socket.on("summary-all-users", (data) => {
        document.getElementById("questionText").innerText = "📊 Kết quả tổng hợp thí sinh:";
        document.getElementById("answerList").innerHTML = "";
        document.getElementById("timer").innerText = "--";

        let html = "";

        data.forEach((student, i) => {
            html += `<h4>${i + 1}. ${student.fullName}</h4>`;
            html += `<p>📝 Tổng: ${student.total} câu | ✅ Đúng: ${student.correct} | ❌ Sai: ${student.total - student.correct} | 🎯 Điểm: ${student.score}</p>`;
            html += `<ul>`;
            student.details.forEach(d => {
                html += `<li><strong>Câu ${d.index}:</strong> ${d.isCorrect ? "✅ Đúng" : "❌ Sai"} - Bạn chọn: ${d.selectedAnswer ?? "Không chọn"} | Đúng: ${d.correctAnswer}</li>`;
            });
            html += `</ul><hr/>`;
        });

        document.getElementById("summaryBox").innerHTML = html;
    });


    async function loadQuestion(round) {
        clearInterval(timerInterval);
        try {
            const res = await fetch(`http://localhost:3000/api/questions/question/${round}/0`);
            if (!res.ok) {
                document.getElementById("questionText").innerText = "Không tải được câu hỏi.";
                return;
            }

            const q = await res.json();
            currentQuestionId = q.QuestionId;
            correctAnswer = q.CorrectAnswer;

            document.getElementById("questionIndex").innerText = round;
            document.getElementById("questionText").innerText = q.Content;

            const container = document.getElementById("answerList");
            container.innerHTML = ["A", "B", "C", "D"].map(opt => `
                <div><button id="btn_${opt}" onclick="submitAnswer('${opt}', ${q.QuestionId})">${opt}: ${q["Option" + opt]}</button></div>
            `).join("");

            document.getElementById("timer").innerText = "--";
            document.getElementById("explanationBox").style.display = "none";
        } catch (err) {
            console.error("❌ Lỗi khi tải câu hỏi:", err);
            document.getElementById("questionText").innerText = "Lỗi khi tải câu hỏi.";
        }
    }

    function startTimer(seconds, questionId) {
        clearInterval(timerInterval);
        let timeLeft = seconds;
        document.getElementById("timer").innerText = timeLeft;

        timerInterval = setInterval(() => {
            timeLeft--;
            document.getElementById("timer").innerText = timeLeft;

            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                canAnswer = false;
                highlightCorrect();
                sendFinalAnswer();
            }
        }, 1000);
    }

    async function submitAnswer(answer, questionId) {
        if (!canAnswer) return;
        selectedAnswer = answer;
        canAnswer = false;
        clearInterval(timerInterval);
        document.getElementById("questionText").innerText = `Bạn đã chọn đáp án: ${answer}`;
        await sendFinalAnswer();
        highlightCorrect();
    }

    async function sendFinalAnswer() {
        if (selectedAnswer === null) {
            document.getElementById("questionText").innerText = "Bạn không chọn đáp án nào.";
        }

        try {
            await fetch('http://localhost:3000/api/answers', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    userId: userId,
                    questionId: currentQuestionId,
                    selectedAnswer: selectedAnswer
                })
            });
        } catch (err) {
            console.error("❌ Lỗi khi gửi đáp án:", err);
        }
    }

    function highlightCorrect() {
        if (!correctAnswer) return;
        const btn = document.getElementById("btn_" + correctAnswer);
        if (btn) {
            btn.style.border = "5px solid red";
            btn.style.fontWeight = "bold";
        }
    }

    socket.on("round-ended", (round) => {
        alert("⏹ Vòng " + round + " đã kết thúc!");
    });

    socket.on("display-results", () => {
        alert("📊 Tổng kết điểm sẽ hiển thị ở đây!");
    });
</script>
