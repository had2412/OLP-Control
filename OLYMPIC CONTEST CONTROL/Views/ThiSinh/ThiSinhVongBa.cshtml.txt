@{
    ViewBag.Title = "Vòng 3 - Thí sinh";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    body {
        background: linear-gradient(135deg, #f8f9fa 0%, #e8f5e9 100%);
        min-height: 100vh;
        font-family: 'Roboto', sans-serif;
        margin: 0;
        padding: 0;
    }

    .contest-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 30px 20px;
    }

    .welcome-section {
        background: white;
        border-radius: 20px;
        padding: 25px 30px;
        margin-bottom: 30px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
        border-left: 5px solid #4caf50;
        text-align: center;
    }

    .round-title {
        color: #2e7d32;
        font-size: 2.2rem;
        font-weight: 800;
        text-align: center;
        margin-bottom: 10px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .round-subtitle {
        color: #4caf50;
        font-size: 1.1rem;
        text-align: center;
        margin-bottom: 0;
        font-weight: 500;
    }

    .package-selection {
        background: white;
        border-radius: 20px;
        padding: 40px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
        border: 3px solid transparent;
        transition: all 0.3s ease;
        margin-bottom: 30px;
        text-align: center;
    }

        .package-selection:hover {
            border-color: #4caf50;
            transform: translateY(-2px);
        }

    .package-title {
        color: #2e7d32;
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 30px;
    }

    .package-buttons {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
    }

    .package-button {
        background: linear-gradient(135deg, #4caf50 0%, #2e7d32 100%);
        color: white;
        border: none;
        padding: 25px 20px;
        border-radius: 15px;
        font-size: 1.2rem;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        position: relative;
        overflow: hidden;
    }

        .package-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(76, 175, 80, 0.4);
        }

        .package-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .package-button:hover::before {
            left: 100%;
        }

    .question-box {
        background: white;
        border-radius: 20px;
        padding: 40px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
        border: 3px solid transparent;
        transition: all 0.3s ease;
        margin-bottom: 30px;
    }

        .question-box:hover {
            border-color: #4caf50;
            transform: translateY(-2px);
        }

    .question-header {
        background: linear-gradient(135deg, #4caf50 0%, #2e7d32 100%);
        color: white;
        padding: 20px;
        border-radius: 15px;
        margin-bottom: 25px;
        text-align: center;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }

    .question-number {
        font-size: 1.3rem;
        font-weight: 700;
        margin-bottom: 5px;
    }

    .question-content {
        background: #f8f9fa;
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 30px;
        border-left: 5px solid #4caf50;
        font-size: 1.2rem;
        color: #2e7d32;
        font-weight: 600;
        line-height: 1.6;
    }

    .answer-options {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .answer-button {
        background: white;
        border: 3px solid #e8f5e9;
        color: #2e7d32;
        padding: 20px 25px;
        border-radius: 15px;
        font-size: 1.1rem;
        font-weight: 600;
        text-align: left;
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
        overflow: hidden;
        min-height: 80px;
        display: flex;
        align-items: center;
    }

        .answer-button:hover:not(:disabled) {
            border-color: #4caf50;
            background: #e8f5e9;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(76, 175, 80, 0.2);
        }

        .answer-button:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

        .answer-button.selected {
            border-color: #ffc107;
            background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
            color: #856404;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 193, 7, 0.3);
        }

    .star-section {
        background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
        border: 2px solid #ffc107;
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 25px;
        text-align: center;
    }

    .star-button {
        background: linear-gradient(135deg, #ffc107 0%, #ff9800 100%);
        color: white;
        border: none;
        padding: 15px 30px;
        border-radius: 50px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(255, 193, 7, 0.3);
    }

        .star-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 193, 7, 0.4);
        }

        .star-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

    .timer-section {
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
        color: white;
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
        animation: pulse 1s infinite;
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.02);
        }

        100% {
            transform: scale(1);
        }
    }

    .timer-text {
        font-size: 1.3rem;
        font-weight: 700;
        margin: 0;
    }

    .status-indicator {
        background: white;
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        text-align: center;
    }

    .status-text {
        color: #666;
        font-size: 1.1rem;
        font-weight: 500;
    }

    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid #e8f5e9;
        border-radius: 50%;
        border-top-color: #4caf50;
        animation: spin 1s ease-in-out infinite;
        margin-right: 10px;
    }



    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    @@media (max-width: 768px) {
        .contest-container {
            padding: 15px 10px;
        }

        .package-selection,
        .question-box {
            padding: 25px 20px;
        }

        .package-buttons {
            grid-template-columns: 1fr;
        }

        .answer-options {
            grid-template-columns: 1fr;
        }

        .question-content {
            font-size: 1.1rem;
        }

        .round-title {
            font-size: 1.8rem;
        }
    }

    .final-summary {
        min-height: 100vh;
        background: #f1f8e9;
        padding: 0px;
        animation: fadeIn 0.8s ease-in-out;
    }

        .final-summary .summary-wrapper {
            background: white;
            border-radius: 0px;
            padding: 30px;
            box-shadow: none;
            width: 100%; /* chiếm toàn màn hình */
            max-width: 100%; /* bỏ giới hạn */
            text-align: center;
            margin: 0; /* không căn giữa nữa */
            text-align: center;
        }

        .final-summary h2 {
            text-align: center;
            margin-bottom: 25px;
            color: #2e7d32;
            font-weight: 800;
            font-size: 2rem;
        }

        .final-summary table {
            width: 100%; /* bảng trải full trong wrapper */
            border-collapse: collapse;
        }

        .final-summary th, .final-summary td {
            border: 1px solid #ddd;
            padding: 60px 80px;
            text-align: center;
            font-size: 1.5rem;
        }

        .final-summary th {
            background: #a5d6a7;
            color: #1b5e20;
            font-size: 1.1rem;
        }

        .final-summary td strong {
            color: #d32f2f;
            font-weight: 700;
        }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    #star-animation-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    overflow: hidden;
    z-index: 9999;
}

/* Ngôi sao chính bay lên */
.star-fly {
    position: fixed;
    bottom: 40px;
    left: 60px; /* góc trái */
    font-size: 60px;
    color: gold;
    animation: starFlyUp 2.5s ease-in-out forwards;
    text-shadow: 0 0 25px rgba(255, 215, 0, 0.9);
}

/* Ngôi sao nhỏ nổ ra */
.star-spark {
    position: fixed;
    font-size: 16px;
    color: gold;
    opacity: 0;
    text-shadow: 0 0 15px rgba(255, 215, 0, 0.9);
    animation: sparkMove 1.5s ease-out forwards;
}

@@keyframes starFlyUp {
    0% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
    }
    60% {
        transform: translate(calc(50vw - 60px), -50vh) scale(1.8);
        opacity: 1;
    }
    100% {
        transform: translate(calc(50vw - 60px), -50vh) scale(0.5);
        opacity: 0;
    }
}

/* hiệu ứng nổ sao nhỏ */
@@keyframes sparkMove {
    0% {
        opacity: 1;
        transform: translate(0, 0) scale(0.5);
    }
    100% {
        opacity: 0;
        transform: translate(var(--dx), var(--dy)) scale(1.4);
    }
}

</style>

<div class="contest-container">
    <!-- Welcome Section -->
    <div class="welcome-section">
        <h1 class="round-title">
            <i class="fas fa-star"></i> Vòng 3 - Thi đấu
        </h1>
        <p class="round-subtitle">
            <i class="fas fa-gift"></i> Chọn gói câu hỏi và sử dụng ngôi sao hy vọng!
        </p>
    </div>

    <!-- Package Selection -->
    <div id="package-selection" class="package-selection" style="display:none;">
        <h2 class="package-title">
            <i class="fas fa-box-open"></i> 📦 Chọn gói câu hỏi
        </h2>
        <div class="package-buttons">
            <button id="btn40" class="package-button">
                <i class="fas fa-star"></i><br>
                Gói 40 điểm
            </button>
            <button id="btn60" class="package-button">
                <i class="fas fa-star"></i><i class="fas fa-star"></i><br>
                Gói 60 điểm
            </button>
            <button id="btn80" class="package-button">
                <i class="fas fa-star"></i><i class="fas fa-star"></i><i class="fas fa-star"></i><br>
                Gói 80 điểm
            </button>
        </div>
        <p style="color: #666; font-style: italic;">
            <i class="fas fa-info-circle"></i> Gói điểm càng cao, câu hỏi càng khó!
        </p>
    </div>

    <!-- Question Box -->
    <div id="question-box" class="question-box" style="display:none;">
        <div class="question-header">
            <div class="question-number">
                <i class="fas fa-question-circle"></i> Câu <span id="question-order">--</span>
            </div>
        </div>

        <div class="question-content" id="question-content">
            <i class="fas fa-spinner loading-spinner"></i> Đang tải câu hỏi...
        </div>

        <div class="answer-options">
            <button id="btnA" class="answer-button">
                <strong>A:</strong> <span id="optionA">--</span>
            </button>
            <button id="btnB" class="answer-button">
                <strong>B:</strong> <span id="optionB">--</span>
            </button>
            <button id="btnC" class="answer-button">
                <strong>C:</strong> <span id="optionC">--</span>
            </button>
            <button id="btnD" class="answer-button">
                <strong>D:</strong> <span id="optionD">--</span>
            </button>
        </div>

        <div class="star-section">
            <button id="star-button" class="star-button">
                <i class="fas fa-star"></i> Dùng ngôi sao hy vọng ⭐
            </button>
            <p style="margin: 10px 0 0 0; color: #856404; font-size: 0.9rem;">
                <i class="fas fa-lightbulb"></i> Ngôi sao hy vọng giúp bạn có thêm cơ hội!
            </p>
        </div>

        <!-- chỗ hiển thị animation -->
        <div id="star-animation-container"></div>

        <div class="timer-section">
            <p class="timer-text">
                <i class="fas fa-clock"></i> Thời gian: <span id="countdown">30</span>s
            </p>
        </div>
    </div>

    <!-- Status Indicator -->
    <div class="status-indicator">
        <div class="status-text">
            <i class="fas fa-broadcast-tower"></i> Trạng thái: Đang kết nối với máy chủ
        </div>
    </div>
</div>
<!-- Nút bấm chuông -->
<div style="text-align:center;margin-top:10px;">
    <button id="btnBuzz" style="display:none;padding:10px 18px;border-radius:8px;">Bấm chuông</button>
</div>
<!-- Kết quả tổng kết 3 vòng -->
<div id="summaryBox" class="final-summary" style="display:none;"></div>

@section Scripts {
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script>
        const socket = io("http://localhost:3000");

        const userId = "@ViewBag.UserId";
        const fullName = "@ViewBag.FullName";

        let currentQuestionId = null;
        let timerInterval = null;
        let answered = false;        // ✅ chống gửi trùng
        let isStarUsed = false;      // chỉ để hiển thị nút, server quản lý thật bằng v3-set-star


        // Khi câu hỏi mở cho người khác bấm chuông
        socket.on("v3-open-for-others", (data) => {
            const btn = document.getElementById("btnBuzz");
            if (!btn) return;

            // 🔑 kiểm tra: chỉ cho phép nếu mình không phải người chọn gói
            if (data.ownerId === userId) {
                // mình là người chọn gói => không cho hiện nút
                btn.style.display = 'none';
                btn.disabled = true;
            } else {
                // mình không phải người chọn gói => được bấm chuông
                btn.style.display = 'inline-block';
                btn.disabled = false;
            }
        });

        // Khi bấm chuông
        document.getElementById("btnBuzz").addEventListener("click", () => {
            socket.emit("v3-buzz", { userId });
            document.getElementById("btnBuzz").disabled = true;
        });

        // Khi admin xác nhận ai được trả lời
        socket.on("v3-buzzer-confirmed", (data) => {
            if (data.userId === userId) {
                alert("Bạn đã được quyền trả lời!");
                document.getElementById("question-box").style.display = "block";
            } else {
                alert(`${data.fullName} đã được quyền trả lời.`);
            }
            const btn = document.getElementById("btnBuzz");
            if (btn) btn.style.display = 'none';
        });
        // 2. Hiển thị câu hỏi
        socket.on("v3-show-question", (data) => {
            currentQuestionId = data.QuestionId;
            answered = false;
            isStarUsed = data.starUsed;

            // Nếu thí sinh đã dùng sao thì disable nút luôn
            const btn = document.getElementById("star-button");
            if (isStarUsed) {
                btn.disabled = true;
                btn.innerHTML = '<i class="fas fa-star"></i> Đã dùng ngôi sao ⭐';
            } else {
                btn.disabled = false;
                btn.innerHTML = '<i class="fas fa-star"></i> Dùng ngôi sao hy vọng ⭐';
            }

            document.getElementById("question-order").innerText = data.Order;
            document.getElementById("question-content").innerHTML =
                `<i class="fas fa-question-circle"></i> ${data.Content}`;
            document.getElementById("optionA").innerText = data.OptionA;
            document.getElementById("optionB").innerText = data.OptionB;
            document.getElementById("optionC").innerText = data.OptionC;
            document.getElementById("optionD").innerText = data.OptionD;

            enableButtons();
            startTimer();
            updateStatus(`Đã nhận câu hỏi ${data.Order}`);
        });


        function updateStatus(message) {
            document.querySelector('.status-text').innerHTML =
                `<i class="fas fa-broadcast-tower"></i> ${message}`;
        }

        // ✅ Join đúng event server + giữ lại join-room (compat nếu bạn có handler cũ)
        socket.emit("join-room", userId, fullName);
        socket.emit("v3-join", { userId, fullName });

        // ✅ Khi admin phát sự kiện bắt đầu vòng 3 -> mở chọn gói
        socket.on("v3-start-round", (data) => {
            if (data.userId !== userId) return; // Không phải mình thì bỏ qua

            document.getElementById("package-selection").style.display = "block";
            updateStatus("Vòng 3 đã bắt đầu, hãy chọn gói câu hỏi!");
        });

        // ===== Chọn gói =====
        function selectPackage(points) {
            socket.emit("v3-select-package", { userId, fullName, points });
            document.getElementById("package-selection").style.display = "none";
            document.getElementById("question-box").style.display = "block";
            updateStatus(`Đã chọn gói ${points} điểm`);
        }
        document.getElementById("btn40").addEventListener("click", () => selectPackage(40));
        document.getElementById("btn60").addEventListener("click", () => selectPackage(60));
        document.getElementById("btn80").addEventListener("click", () => selectPackage(80));

        // ===== Nhận câu hỏi =====
        socket.on("v3-show-question", (data) => {
            currentQuestionId = data.QuestionId;
            answered = false;
            isStarUsed = data.starUsed;

            document.getElementById("question-order").innerText = data.Order;
            document.getElementById("question-content").innerHTML =
                `<i class="fas fa-question-circle"></i> ${data.Content}`;
            document.getElementById("optionA").innerText = data.OptionA;
            document.getElementById("optionB").innerText = data.OptionB;
            document.getElementById("optionC").innerText = data.OptionC;
            document.getElementById("optionD").innerText = data.OptionD;

            enableButtons();

            // ⭐ Chỉ bật nút Ngôi sao Hy vọng nếu là câu cuối (thường là câu 3)
            const btn = document.getElementById("star-button");
            if (isStarUsed) {
                btn.disabled = true;
                document.getElementById("star-button").style.display = "none";
                
                
                //btn.innerHTML = '<i class="fas fa-star"></i> Đã dùng ngôi sao ⭐';
            } else {
                if (data.Order === 3) {   // ✅ chỉ cho chọn ở câu cuối
                    btn.disabled = false;
                    btn.innerHTML = '<i class="fas fa-star"></i> Dùng ngôi sao hy vọng ⭐';
                } else {
                    btn.disabled = true;
                    btn.innerHTML = '<i class="fas fa-star"></i> Dùng ngôi sao hy vọng ⭐';
                }
            }

            startTimer();
            updateStatus(`Đã nhận câu hỏi ${data.Order}`);
        });

        // ===== Gửi đáp án (đÃ sửa tên field thành 'answer' và dừng timer) =====
        function submitAnswer(ans) {
            if (answered) return;               // ✅ chặn double-submit
            answered = true;
            clearInterval(timerInterval);       // ✅ dừng đồng hồ khi đã gửi
            disableButtons();

            socket.emit("v3-submit-answer", {
                userId,
                questionId: currentQuestionId,
                answer: ans                      // ✅ ĐÚNG field server mong đợi
            });

            document.getElementById("star-button").disabled = true;
            updateStatus(`Đã gửi đáp án: ${ans || 'Không chọn'}`);
        }
        document.getElementById("btnA").addEventListener("click", () => submitAnswer("A"));
        document.getElementById("btnB").addEventListener("click", () => submitAnswer("B"));
        document.getElementById("btnC").addEventListener("click", () => submitAnswer("C"));
        document.getElementById("btnD").addEventListener("click", () => submitAnswer("D"));

        // ngôi sao hy vọng
        document.getElementById("star-button").addEventListener("click", () => {
            
            if (isStarUsed) return;

            isStarUsed = true;
            const btn = document.getElementById("star-button");
            btn.disabled = true;
            btn.innerHTML = '<i class="fas fa-star"></i> Đã dùng ngôi sao ⭐';

            // gửi event lên server
            socket.emit("v3-set-star", { userId });
            updateStatus("Đã sử dụng ngôi sao hy vọng");

            
                playStarAnimation();
            

        });


        function disableButtons() {
            ["btnA", "btnB", "btnC", "btnD"].forEach(id => {
                document.getElementById(id).disabled = true;
            });
        }
        function enableButtons() {
            ["btnA", "btnB", "btnC", "btnD"].forEach(id => {
                document.getElementById(id).disabled = false;
            });
            document.getElementById("star-button").disabled = false;
            document.getElementById("star-button").innerHTML =
                '<i class="fas fa-star"></i> Dùng ngôi sao hy vọng ⭐';
        }

        // ===== Đồng hồ đếm ngược (không gửi trùng khi đã nộp) =====
        function startTimer() {
            clearInterval(timerInterval);
            let time = 30;
            document.getElementById("countdown").innerText = time;

            timerInterval = setInterval(() => {
                time--;
                document.getElementById("countdown").innerText = time;

                if (time <= 5) {
                    document.querySelector('.timer-section').style.background =
                        'linear-gradient(135deg, #ff4444 0%, #cc0000 100%)';
                }

                if (time <= 0) {
                    clearInterval(timerInterval);
                    if (!answered) {                    // ✅ không gửi nếu đã bấm
                        answered = true;
                        disableButtons();
                        socket.emit("v3-submit-answer", {
                            userId,
                            questionId: currentQuestionId,
                            answer: null                 // ✅ field đúng tên
                        });
                        updateStatus("Hết thời gian - Tự động gửi đáp án");
                    }
                }
            }, 1000);
        }
        // bảng tổng kết 3 vòng
        socket.on("final-summary-results", (data) => {
            // Ẩn toàn bộ phần thi cũ
            document.querySelectorAll(".contest-container, .welcome-section, .package-selection, .question-box, .status-indicator, #btnBuzz")
                .forEach(el => el.style.display = "none");

            // Hiện phần tổng kết
            const summaryDiv = document.getElementById("summaryBox");
            summaryDiv.style.display = "flex";

            let html = `
            <div>
                <h2>🏁 Kết quả tổng hợp 3 vòng</h2>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Hạng</th>
                            <th>Tên thí sinh</th>
                            <th>Vòng 1</th>
                            <th>Vòng 2</th>
                            <th>Vòng 3</th>
                            <th>Tổng</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

            data.sort((a, b) => b.totalScore - a.totalScore);
            data.forEach((u, i) => {
                let rankIcon = i + 1;
                if (i === 0) rankIcon = "🏆";
                else if (i === 1) rankIcon = "🥈";
                else if (i === 2) rankIcon = "🥉";

                html += `
                <tr>
                    <td>${rankIcon}</td>
                    <td>${u.fullName}</td>
                    <td>${u.v1Score}</td>
                    <td>${u.v2Score}</td>
                    <td>${u.v3Score}</td>
                    <td><strong>${u.totalScore}</strong></td>
                </tr>
            `;
            });

            html += `</tbody></table></div>`;
            summaryDiv.innerHTML = html;
        });


        // ⭐ Hiệu ứng ngôi sao hy vọng
        function playStarAnimation() {
            const container = document.getElementById("star-animation-container");
            if (!container) return;

            // Ngôi sao chính
            const mainStar = document.createElement("div");
            mainStar.className = "star-fly";
            mainStar.innerHTML = "⭐";
            container.appendChild(mainStar);

            // Khi bay xong -> tạo vụ nổ sao nhỏ
            mainStar.addEventListener("animationend", () => {
                mainStar.remove();

                // Tạo vụ nổ 15 ngôi sao nhỏ
                for (let i = 0; i < 15; i++) {
                    const spark = document.createElement("div");
                    spark.className = "star-spark";
                    spark.innerHTML = "✦";

                    // góc ngẫu nhiên xung quanh trung tâm
                    const angle = (Math.PI * 2 * i) / 15;
                    const radius = 150 + Math.random() * 70;
                    spark.style.setProperty("--dx", `${Math.cos(angle) * radius}px`);
                    spark.style.setProperty("--dy", `${Math.sin(angle) * radius}px`);

                    spark.style.left = "50vw";
                    spark.style.top = "40vh";
                    container.appendChild(spark);

                    // xóa sau khi nổ xong
                    spark.addEventListener("animationend", () => spark.remove());
                }
            });
        }


        // ===== Trạng thái kết nối =====
        socket.on('connect', () => updateStatus('Đã kết nối với máy chủ'));
        socket.on('disconnect', () => updateStatus('Mất kết nối với máy chủ'));
    </script>
}

