@{
    ViewBag.Title = "Thí sinh - Vòng thi";
}
@if (Session["FullName"] != null)
{
    <p>Chào mừng, @Session["FullName"]!</p>
}

<div id="contestArea">
    <h2>Câu hỏi <span id="questionIndex">--</span>/10</h2>
    <div id="questionText">Đang chờ bắt đầu...</div>
    <div id="answerList"></div>
    <h3>Thời gian còn lại: <span id="timer">--</span> giây</h3>
    <p id="explanationBox" style="display:none; font-style:italic; margin-top:10px; color:blue;"></p>
</div>

<div id="summaryBox" style="margin-top:20px;"></div>

<script src="https://cdn.socket.io/4.6.1/socket.io.min.js"></script>
<script>
    const socket = io("http://localhost:3000");
    const userId = @Session["UserId"];

    let currentRound = 0;
    let currentIndex = 0;
    let currentQuestionId = null;
    let canAnswer = false;
    let timerInterval;
    let correctAnswer = null;
    let selectedAnswer = null;
    let startTime = null;
    let lastSelectedTime = null;

    function startTimer(seconds, questionId) {
        clearInterval(timerInterval);
        let timeLeft = seconds;
        startTime = Date.now(); // ✅ Lưu thời gian bắt đầu

        document.getElementById("timer").innerText = timeLeft;

        timerInterval = setInterval(() => {
            timeLeft--;
            document.getElementById("timer").innerText = timeLeft;

            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                canAnswer = false;
                highlightCorrect();
                sendFinalAnswer();
            }
        }, 1000);
    }

    socket.emit("join-room", userId);

    socket.on('round-started', async (round) => {
        currentRound = round;
        currentIndex = 0;
        await loadQuestion(currentRound);
        canAnswer = false;
    });

    socket.on('show-question', async (round) => {
        currentRound = round;
        currentIndex = 0;
        await loadQuestion(currentRound);
        canAnswer = false;
    });

    socket.on("start-timer", ({ round, questionId }) => {
        if (round === currentRound) {
            canAnswer = true;
            selectedAnswer = null;
            currentQuestionId = questionId;
            startTimer(15, currentQuestionId);
        }
    });

    socket.on("summary-all-users", (data) => {
        // Ẩn khu vực làm bài
        document.getElementById("contestArea").style.display = "none";

        let html = `
        <h3>📊 Kết quả tổng hợp thí sinh</h3>
        <div class="table-responsive">
            <table class="table table-bordered table-striped table-hover align-middle">
                <thead class="table-primary text-center">
                    <tr>
                        <th>#</th>
                        <th>Tên thí sinh</th>
                        <th>Tổng câu</th>
                        <th>Đúng</th>
                        <th>Sai</th>
                        <th>Điểm</th>
                        <th>⏱ Thời gian (giây)</th>
                        <th>Chi tiết</th>
                    </tr>
                </thead>
                <tbody>
    `;

        data.forEach((student, i) => {
            // Tính tổng thời gian làm bài
            const totalTime = student.details.reduce((sum, d) => sum + (d.timeTaken || 0), 0);

            const detailHtml = student.details.map(d => {
                return `<div>Câu ${d.index}: ${d.isCorrect ? '✅' : '❌'} - Chọn: <strong>${d.selectedAnswer ?? 'Không chọn'}</strong>, Đúng: ${d.correctAnswer}, ⏱ ${d.timeTaken ?? "--"}s</div>`;
            }).join("");

            html += `
            <tr>
                <td class="text-center">${i + 1}</td>
                <td>${student.fullName}</td>
                <td class="text-center">${student.total}</td>
                <td class="text-success text-center">${student.correct}</td>
                <td class="text-danger text-center">${student.total - student.correct}</td>
                <td class="fw-bold text-center">${student.score}</td>
                <td class="text-center text-primary">${totalTime}s</td>
                <td>${detailHtml}</td>
            </tr>
        `;
        });

        html += `
                </tbody>
            </table>
        </div>
    `;

        document.getElementById("summaryBox").innerHTML = html;
    });




    async function loadQuestion(round) {
        clearInterval(timerInterval);
        try {
            const res = await fetch(`http://localhost:3000/api/questions/question/${round}/0`);
            if (!res.ok) {
                document.getElementById("questionText").innerText = "Không tải được câu hỏi.";
                return;
            }

            const q = await res.json();
            currentQuestionId = q.QuestionId;
            correctAnswer = q.CorrectAnswer;

            document.getElementById("questionIndex").innerText = round;
            document.getElementById("questionText").innerText = q.Content;

            const container = document.getElementById("answerList");
            container.innerHTML = ["A", "B", "C", "D"].map(opt => `
                <div><button id="btn_${opt}" onclick="submitAnswer('${opt}', ${q.QuestionId})">${opt}: ${q["Option" + opt]}</button></div>
            `).join("");

            document.getElementById("timer").innerText = "--";
            document.getElementById("explanationBox").style.display = "none";
        } catch (err) {
            console.error("❌ Lỗi khi tải câu hỏi:", err);
            document.getElementById("questionText").innerText = "Lỗi khi tải câu hỏi.";
        }
    }



    async function submitAnswer(answer, questionId) {
    if (!canAnswer) return;

    selectedAnswer = answer;
    lastSelectedTime = Date.now(); // ✅ Cập nhật thời gian chọn cuối cùng

    // Highlight lựa chọn
    ["A", "B", "C", "D"].forEach(opt => {
        const btn = document.getElementById("btn_" + opt);
        if (btn) {
            btn.style.backgroundColor = (opt === answer) ? "#ffeaa7" : "";
        }
    });

    document.getElementById("questionText").innerText = `Bạn đã chọn đáp án: ${answer}`;
}



    async function sendFinalAnswer() {
        let timeTaken = 15; // Mặc định nếu không chọn

        if (selectedAnswer !== null && lastSelectedTime !== null) {
            timeTaken = Math.floor((lastSelectedTime - startTime) / 1000);
        }

        try {
            await fetch('http://localhost:3000/api/answers', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    userId: userId,
                    questionId: currentQuestionId,
                    selectedAnswer: selectedAnswer,
                    timeTaken: timeTaken
                })
            });
        } catch (err) {
            console.error("❌ Lỗi khi gửi đáp án:", err);
        }
    }


    function highlightCorrect() {
        if (!correctAnswer) return;
        const btn = document.getElementById("btn_" + correctAnswer);
        if (btn) {
            btn.style.border = "5px solid red";
            btn.style.fontWeight = "bold";
        }
    }

    socket.on("round-ended", (round) => {
        alert("⏹ Vòng " + round + " đã kết thúc!");
    });

    socket.on("display-results", () => {
        alert("📊 Tổng kết điểm sẽ hiển thị ở đây!");
    });

    socket.on("clear-student-summary", () => {
        // Xóa nội dung kết quả
        document.getElementById("summaryBox").innerHTML = "";

        // 👉 THÊM các dòng sau để khôi phục giao diện câu hỏi
        document.getElementById("questionText").innerText = "Đang chờ bắt đầu...";
        document.getElementById("answerList").innerHTML = "";
        document.getElementById("timer").innerText = "--";
        document.getElementById("explanationBox").style.display = "none";

        // Nếu bạn có ẩn contestArea khi hiển thị kết quả thì cũng bật lại
        document.getElementById("contestArea").style.display = "block";
    });


</script>
