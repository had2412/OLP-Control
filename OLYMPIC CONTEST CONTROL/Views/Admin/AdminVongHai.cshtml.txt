@{
    ViewBag.Title = "Vòng 2 - Giành quyền trả lời";
}

<style>
    body {
        background: linear-gradient(135deg, #f1f8e9 0%, #e8f5e9 50%, #c8e6c9 100%);
        font-family: 'Segoe UI', 'Arial', sans-serif;
        color: #2e7d32;
        min-height: 100vh;
        font-size: 14px;
    }

    .container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
    }

    .page-header {
        background: linear-gradient(135deg, #4caf50 0%, #388e3c 50%, #2e7d32 100%);
        color: white;
        padding: 25px;
        border-radius: 18px;
        margin-bottom: 25px;
        box-shadow: 0 10px 30px rgba(76, 175, 80, 0.25);
        text-align: center;
        position: relative;
        overflow: hidden;
    }

        .page-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: rotate 25s linear infinite;
        }

    @@keyframes rotate {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }

    .page-header h2 {
        margin: 0;
        font-size: 2rem;
        font-weight: 800;
        text-shadow: 0 3px 6px rgba(0,0,0,0.2);
        position: relative;
        z-index: 2;
    }

    .main-content {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 25px;
        margin-bottom: 25px;
    }

    .question-panel {
        background: white;
        border-radius: 18px;
        padding: 25px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        border: 3px solid #e8f5e9;
        position: relative;
        overflow: hidden;
    }

        .question-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 18px;
            padding: 3px;
            background: linear-gradient(135deg, #4caf50, #66bb6a, #81c784);
            mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            mask-composite: exclude;
        }

    .control-panel {
        background: white;
        border-radius: 18px;
        padding: 25px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        border: 3px solid #e8f5e9;
    }

    .panel-title {
        font-size: 1.2rem;
        font-weight: 700;
        color: #2e7d32;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 8px;
        padding-bottom: 10px;
        border-bottom: 2px solid #e8f5e9;
    }

    .info-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
        margin-bottom: 20px;
    }

    .info-item {
        background: linear-gradient(135deg, #f1f8e9 0%, #e8f5e9 100%);
        border-radius: 10px;
        padding: 12px 15px;
        border: 2px solid #c8e6c9;
    }

    .info-label {
        font-size: 0.85rem;
        color: #666;
        font-weight: 600;
        margin-bottom: 5px;
    }

    .info-value {
        font-size: 1rem;
        font-weight: 700;
        color: #2e7d32;
    }

    .question-content {
        background: linear-gradient(135deg, #f8fff9 0%, #f1f8e9 100%);
        border: 2px solid #c8e6c9;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 15px;
        font-size: 1rem;
        font-weight: 500;
        color: #2e7d32;
        line-height: 1.5;
        position: relative;
    }

        .question-content::before {
            content: '❓';
            position: absolute;
            top: -8px;
            left: 15px;
            background: white;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 1rem;
        }

    .options-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
        margin-bottom: 20px;
    }

    .option-item {
        background: white;
        border: 2px solid #e8f5e9;
        border-radius: 8px;
        padding: 10px 12px;
        font-size: 0.9rem;
        font-weight: 500;
        color: #424242;
        transition: all 0.3s ease;
    }

        .option-item:hover {
            border-color: #4caf50;
            background: #f1f8e9;
            transform: translateY(-1px);
        }

        .option-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 3px;
            height: 100%;
            background: linear-gradient(135deg, #4caf50, #66bb6a);
        }

    .btn {
        border: none;
        border-radius: 8px;
        padding: 10px 18px;
        font-weight: 600;
        font-size: 0.85rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
        margin: 3px;
        position: relative;
        overflow: hidden;
    }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

    .btn-primary {
        background: linear-gradient(135deg, #4caf50 0%, #388e3c 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
        }

    .btn-success {
        background: linear-gradient(135deg, #66bb6a 0%, #4caf50 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(102, 187, 106, 0.3);
    }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 187, 106, 0.4);
        }

    .btn-warning {
        background: linear-gradient(135deg, #ffb74d 0%, #ff9800 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(255, 183, 77, 0.3);
    }

        .btn-warning:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 183, 77, 0.4);
        }

    .btn-danger {
        background: linear-gradient(135deg, #ef5350 0%, #f44336 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(239, 83, 80, 0.3);
    }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(239, 83, 80, 0.4);
        }

    .btn-info {
        background: linear-gradient(135deg, #29b6f6 0%, #0288d1 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(41, 182, 246, 0.3);
    }

        .btn-info:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(41, 182, 246, 0.4);
        }

    .control-buttons {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
        margin-bottom: 20px;
    }

    .timer-section {
        background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);
        border: 2px solid #ffb74d;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
        text-align: center;
        position: relative;
        overflow: hidden;
    }

        .timer-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.1) 50%, transparent 70%);
            animation: shimmer 2s infinite;
        }

    @@keyframes shimmer {
        0% {
            transform: translateX(-100%);
        }

        100% {
            transform: translateX(100%);
        }
    }

    .timer-display {
        font-size: 1.5rem;
        font-weight: 800;
        color: #f57c00;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        position: relative;
        z-index: 2;
    }

    .student-list {
        background: white;
        border-radius: 12px;
        padding: 20px;
        margin-top: 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        border: 2px solid #e8f5e9;
    }

    .student-item {
        background: linear-gradient(135deg, #f1f8e9 0%, #e8f5e9 100%);
        border: 2px solid #c8e6c9;
        border-radius: 8px;
        padding: 8px 12px;
        margin-bottom: 8px;
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .student-item:hover {
            border-color: #4caf50;
            background: linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%);
            transform: translateX(5px);
        }

        .student-item button {
            background: none;
            border: none;
            color: #2e7d32;
            font-weight: 600;
            font-size: 0.9rem;
            cursor: pointer;
            width: 100%;
            text-align: left;
        }

    .results-section {
        background: white;
        border-radius: 18px;
        padding: 25px;
        margin-top: 25px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        border: 3px solid #e8f5e9;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin: 0;
        font-size: 0.85rem;
    }

        .table th {
            background: linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%);
            color: #2e7d32;
            font-weight: 700;
            padding: 10px 8px;
            text-align: center;
            border-bottom: 2px solid #4caf50;
            font-size: 0.8rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .table td {
            padding: 8px;
            border-bottom: 1px solid #e8f5e9;
            vertical-align: middle;
            color: #424242;
            font-size: 0.8rem;
        }

        .table tbody tr:hover {
            background: linear-gradient(135deg, #f1f8e9 0%, #e8f5e9 100%);
        }

    .table-sm td, .table-sm th {
        padding: 4px 6px;
        font-size: 0.75rem;
    }

    .winner-highlight {
        background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%) !important;
        border-color: #ffb74d !important;
        color: #e65100 !important;
        font-weight: 700;
    }

    @@media (max-width: 1200px) {
        .main-content {
            grid-template-columns: 1fr;
        }

        .control-buttons {
            grid-template-columns: 1fr;
        }

        .options-grid {
            grid-template-columns: 1fr;
        }
    }

    @@media (max-width: 768px) {
        .page-header h2 {
            font-size: 1.6rem;
        }

        .container {
            padding: 15px;
        }
    }
</style>

<div class="container">
    <div class="page-header">
        <h2>🎯 Điều khiển vòng 2 - Giành quyền trả lời</h2>
        <p style="margin: 8px 0 0 0; opacity: 0.9; font-size: 1rem;">Quản lý cuộc thi và điều khiển thí sinh</p>
    </div>

    <div class="main-content">
        <div class="question-panel">
            <div class="panel-title">
                📄 Thông tin câu hỏi
            </div>

            <div class="info-grid">
                <div class="info-item">
                    <div class="info-label">Câu hiện tại</div>
                    <div class="info-value" id="questionNumber">--</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Đáp án đúng</div>
                    <div class="info-value" id="correctAnswer">--</div>
                </div>
            </div>

            <div id="questionContent" class="question-content">
                [Câu hỏi sẽ hiển thị ở đây]
            </div>

            <div id="answerOptions" class="options-grid"></div>

            <div class="info-item">
                <div class="info-label">Lời giải</div>
                <div class="info-value" id="explanation">--</div>
            </div>
            <div class="question-panel">
                <h3>Danh sách bấm chuông</h3>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Thí sinh</th>
                            <th>Thời gian (ms)</th>
                            
                        </tr>
                    </thead>
                    <tbody id="buzzList"></tbody>
                </table>
            </div>

        </div>

        <div class="control-panel">
            <div class="panel-title">
                🎮 Điều khiển
            </div>

            <div class="info-grid">
                <div class="info-item">
                    <div class="info-label">Người giành quyền</div>
                    <div class="info-value" id="winnerName">--</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Thời gian còn lại</div>
                    <div class="info-value" id="timer">--</div>
                </div>
                

            </div>

            <div class="control-buttons">
                <button onclick="startRound2()" class="btn btn-primary">🚀 Bắt đầu vòng 2</button>
                <button onclick="startQuestion()" class="btn btn-primary">🚀 Bắt đầu làm bài</button>               
                <button onclick="loadPrevQuestion()" class="btn btn-secondary">⬅️ Câu trước</button>
                <button onclick="loadNextQuestion()" class="btn btn-info">➡️ Câu tiếp theo</button>
                <button onclick="requestStudentList()" class="btn btn-success">✅ Xác nhận người giành quyền</button>
                <button onclick="endAnswer()" class="btn btn-danger">⛔ Kết thúc lượt</button>
                
                <button onclick="getRound2Results()" class="btn btn-info">📊 Xem kết quả thí sinh</button>
            </div>

            <div class="timer-section">
                <div class="timer-display">
                    ⏱️ Thời gian: <span id="timeLeft">--</span> giây
                </div>
            </div>

            <div class="student-list">
                <div class="panel-title">
                    📋 Danh sách thí sinh đang kết nối
                </div>
                <ul id="studentList" style="list-style: none; padding: 0; margin: 0;"></ul>
            </div>
        </div>
    </div>

    <div class="results-section" id="resultContainer" style="display: none;">
        <div class="panel-title">
            📈 Bảng kết quả vòng 2
        </div>
        <table class="table table-bordered" id="resultTable">
            <thead>
                <tr>
                    <th>Họ tên</th>
                    <th>Số câu</th>
                    <th>Đúng</th>
                    <th>Điểm</th>
                    <th>Chi tiết</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<script src="https://cdn.socket.io/4.6.1/socket.io.min.js"></script>
<script>
    const socket = io("http://localhost:3000");

    let currentQuestionIndex = 0;
    let currentQuestion = null;
    let currentWinner = null;

    socket.on("v2-buzzed", (data) => {
        const row = `
        <tr>
            <td>${data.fullName}</td>
            <td>${data.elapsedSeconds}s</td>
            
        </tr>
    `;
        document.getElementById('buzzList').insertAdjacentHTML('beforeend', row);
    });

    function confirmWinner(userId, fullName) {
        socket.emit("v2-confirm-winner", { id: userId, name: fullName });
    }

    // bắt đầu vòng 2
    function startRound2() {
        currentQuestionIndex = 0;
        socket.emit("start-round", 2);
        loadRound2Question(currentQuestionIndex);
    }

    // bắt đầu làm bài
    function startQuestion() {
        currentQuestionIndex++;
        socket.emit("startQuestion", 2);
        loadRound2Question(currentQuestionIndex);
    }

    

    function loadNextQuestion() {
        currentQuestionIndex++;
        loadRound2Question(currentQuestionIndex);
    }
    function loadPrevQuestion() {
        currentQuestionIndex--;
        loadRound2Question(currentQuestionIndex);
    }

    function loadRound2Question(index) {
        // ✅ Reset danh sách bấm chuông mỗi khi sang câu mới
        const buzzList = document.getElementById("buzzList");
        if (buzzList) buzzList.innerHTML = "";

        // ✅ (Tùy chọn) reset người giành quyền và timer
        document.getElementById("winnerName").innerText = "--";
        socket.emit("v2-reset-buzz"); // để bên server reset biến firstBuzz hoặc danh sách bấm chuông

        fetch(`http://localhost:3000/api/questions/round2/${index}`)
            .then(res => res.json())
            .then(q => {
                currentQuestion = q;
                document.getElementById("questionContent").innerText = q.Content;

                const div = document.getElementById("answerOptions");
                if (q.QuestionType === "MCQ") {
                    div.innerHTML = ["A", "B", "C", "D"].map(opt => `
                    <div class="option-item">
                        <strong>${opt}:</strong> ${q["Option" + opt]}
                    </div>
                `).join("");
                } else {
                    div.innerHTML = `<em>Câu hỏi tự luận - thí sinh sẽ nhập câu trả lời</em>`;
                }

                document.getElementById("correctAnswer").innerText = q.CorrectAnswer || "--";
                document.getElementById("explanation").innerText = q.Explanation || "--";

                // ✅ Phát tín hiệu gửi câu hỏi mới cho toàn hệ thống
                socket.emit("v2-show-question", q);
            });
    }




    function requestStudentList() {
        socket.emit("v2-request-students");
    }

    socket.on("v2-student-list", (students) => {
        const ul = document.getElementById("studentList");
        ul.innerHTML = students.map(u => `
            <li class="student-item">
                <button onclick="selectWinner('${u.id}', '${u.name}')">
                    🎯 ${u.name} (ID: ${u.id})
                </button>
            </li>
        `).join("");
    });

    function selectWinner(userId, name) {
        currentWinner = { id: userId, name };
        document.getElementById("winnerName").innerText = name;
        socket.emit("v2-confirm-winner", currentWinner);

        // Highlight selected student
        document.querySelectorAll('.student-item').forEach(item => {
            item.classList.remove('winner-highlight');
        });
        event.target.closest('.student-item').classList.add('winner-highlight');

        alert(`✅ Đã chọn ${name} giành quyền trả lời`);
        startAnswerTimer();
    }
    let adminTimerInterval;
    function startAnswerTimer() {
        clearInterval(adminTimerInterval);

        let timeLeft = 0;
        document.getElementById("timer").innerText = timeLeft;
        document.getElementById("timeLeft").innerText = timeLeft;

        adminTimerInterval = setInterval(() => {
            timeLeft--;
            document.getElementById("timer").innerText = timeLeft;
            document.getElementById("timeLeft").innerText = timeLeft;

            if (timeLeft <= 10) {
                document.querySelector('.timer-section').style.background = 'linear-gradient(135deg, #ffcdd2 0%, #ef9a9a 100%)';
                document.querySelector('.timer-section').style.borderColor = '#f44336';
            }

            if (timeLeft <= 0) {
                stopAnswerTimer(); // gọi luôn stopAnswerTimer() để chuẩn hóa
            }
        }, 1000);

        // emit sau khi đã tạo interval
        socket.emit("v2-start-timer", { duration: 0, winner: currentWinner });
    }

    // 🚀 khi thí sinh nộp đáp án thì bạn dừng timer thế này:
    function stopAnswerTimer() {
        if (adminTimerInterval) {
            clearInterval(adminTimerInterval);
            adminTimerInterval = null; // ✅ tránh gọi interval cũ
        }
        document.getElementById("timer").innerText = "--";
        document.getElementById("timeLeft").innerText = "--";
        document.querySelector('.timer-section').style.background = 'linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%)';
        document.querySelector('.timer-section').style.borderColor = '#ffb74d';
    }

    socket.on("v2-stop-timer-admin", (data) => {
        console.log("Thí sinh đã nộp, dừng timer admin:", data);
        stopAnswerTimer(); // hàm bạn đã có
    });

    function endAnswer() {
        socket.emit("v2-end-turn", currentWinner);
        stopAnswerTimer(); // <— nhớ dừng timer luôn
        alert("⛔ Đã kết thúc lượt trả lời");
    }

    function submitScore() {
        if (!currentWinner?.id) {
            alert("⚠️ Bạn chưa chọn người giành quyền!");
            return;
        }

        const scoreInput = prompt("Nhập điểm (0-10):");
        if (scoreInput === null) return; // Bấm Cancel thì thoát

        // Chuyển sang số
        const score = parseFloat(scoreInput);

        // Kiểm tra hợp lệ
        if (isNaN(score) || score < 0 || score > 10) {
            alert("⚠️ Điểm không hợp lệ! Chỉ được nhập số từ 0 đến 10.");
            return;
        }

        socket.emit("v2-submit-score", {
            userId: currentWinner.id,
            score: parseInt(score)
        });

        alert("✅ Đã gửi điểm cho " + currentWinner.name);
    }

    function getRound2Results() {
        socket.emit("v2-get-results");
        const resultDiv = document.getElementById("resultContainer");
        if (resultDiv.style.display === "none") {
            resultDiv.style.display = "block";
        }
    }

    socket.on("v2-summary-all-users", (data) => {
        const tbody = document.querySelector("#resultTable tbody");
        tbody.innerHTML = "";

        data.forEach(user => {
            const detailRows = user.details.map(d => `
                <tr>
                    <td>Câu ${d.index}</td>
                    <td>${d.selectedAnswer || d.essayAnswer ||  "Chưa trả lời"}</td>
                     <td>${d.isCorrect === null ? "⏳ Chưa chấm" : (d.isCorrect ? "✅ Đúng" : "❌ Sai")}</td>
                    <td>${d.score ?? 0}</td>
                </tr>
            `).join("");

            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${user.fullName}</td>
                <td>${user.total}</td>
                <td>${user.correct}</td>
                <td>${user.totalScore}</td>
                <td>
                    <table class="table table-sm table-bordered">
                        <thead>
                            <tr>
                                <th>Câu</th>
                                <th>Đáp án chọn</th>
                                <th>Đúng/Sai</th>
                                <th>Điểm</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${detailRows}
                        </tbody>
                    </table>
                </td>
            `;
            tbody.appendChild(row);
        });
    });

    socket.on("v2-result-table", (results) => {
        const tbody = document.querySelector("#resultTable tbody");
        tbody.innerHTML = "";

        results.forEach(r => {
            const detailTable = `
                <table class="table table-bordered table-sm">
                    <thead>
                        <tr>
                            <th>Câu</th>
                            <th>Đáp án chọn</th>
                            <th>Đúng/Sai</th>
                            <th>Điểm</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${r.details.map(d => `
                            <tr>
                                <td>${d.index}</td>
                                <td>${d.selectedAnswer || d.essayAnswer || "Chưa trả lời"}</td>
                                <td>${d.isCorrect === null ? "⏳ Chưa chấm" : (d.isCorrect ? "✅ Đúng" : "❌ Sai")}</td>
                                <td>${d.score ?? 0}</td>
                            </tr>
                        `).join("")}
                    </tbody>
                </table>
            `;

            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${r.fullName}</td>
                <td>${r.total}</td>
                <td>${r.correct}</td>
                <td>${r.score}</td>
                <td>${detailTable}</td>
            `;
            tbody.appendChild(row);
        });
    });
</script>