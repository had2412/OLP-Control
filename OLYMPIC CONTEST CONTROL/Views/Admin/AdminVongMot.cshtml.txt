@{
    ViewBag.Title = "Admin - ƒêi·ªÅu khi·ªÉn v√≤ng thi";
}

<style>
    body {
        background: linear-gradient(135deg, #f1f8e9 0%, #e8f5e9 50%, #c8e6c9 100%);
        font-family: 'Segoe UI', 'Arial', sans-serif;
        color: #2e7d32;
        min-height: 100vh;
        font-size: 14px;
    }

    .container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
    }

    .page-header {
        background: linear-gradient(135deg, #4caf50 0%, #388e3c 50%, #2e7d32 100%);
        color: white;
        padding: 25px;
        border-radius: 18px;
        margin-bottom: 25px;
        box-shadow: 0 10px 30px rgba(76, 175, 80, 0.25);
        text-align: center;
        position: relative;
        overflow: hidden;
    }

        .page-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: rotate 25s linear infinite;
        }

    @@keyframes rotate {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }

    .page-header h2 {
        margin: 0;
        font-size: 2rem;
        font-weight: 800;
        text-shadow: 0 3px 6px rgba(0,0,0,0.2);
        position: relative;
        z-index: 2;
    }

    .main-content {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 25px;
        margin-bottom: 25px;
    }

    .question-panel {
        background: white;
        border-radius: 18px;
        padding: 25px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        border: 3px solid #e8f5e9;
        position: relative;
        overflow: hidden;
    }

        .question-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 18px;
            padding: 3px;
            background: linear-gradient(135deg, #4caf50, #66bb6a, #81c784);
            mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            mask-composite: exclude;
        }

    .control-panel {
        background: white;
        border-radius: 18px;
        padding: 25px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        border: 3px solid #e8f5e9;
    }

    .panel-title {
        font-size: 1.2rem;
        font-weight: 700;
        color: #2e7d32;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 8px;
        padding-bottom: 10px;
        border-bottom: 2px solid #e8f5e9;
    }

    .info-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
        margin-bottom: 20px;
    }

    .info-item {
        background: linear-gradient(135deg, #f1f8e9 0%, #e8f5e9 100%);
        border-radius: 10px;
        padding: 12px 15px;
        border: 2px solid #c8e6c9;
    }

    .info-label {
        font-size: 0.85rem;
        color: #666;
        font-weight: 600;
        margin-bottom: 5px;
    }

    .info-value {
        font-size: 1rem;
        font-weight: 700;
        color: #2e7d32;
    }

    .question-content {
        background: linear-gradient(135deg, #f8fff9 0%, #f1f8e9 100%);
        border: 2px solid #c8e6c9;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 15px;
        font-size: 1rem;
        font-weight: 500;
        color: #2e7d32;
        line-height: 1.5;
        position: relative;
    }

        .question-content::before {
            content: '‚ùì';
            position: absolute;
            top: -8px;
            left: 15px;
            background: white;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 1rem;
        }

    .options-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
        margin-bottom: 20px;
    }

    .option-item {
        background: white;
        border: 2px solid #e8f5e9;
        border-radius: 8px;
        padding: 10px 12px;
        font-size: 0.9rem;
        font-weight: 500;
        color: #424242;
        transition: all 0.3s ease;
    }

        .option-item:hover {
            border-color: #4caf50;
            background: #f1f8e9;
            transform: translateY(-1px);
        }

    .btn {
        border: none;
        border-radius: 8px;
        padding: 10px 18px;
        font-weight: 600;
        font-size: 0.85rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
        margin: 3px;
        position: relative;
        overflow: hidden;
    }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

    .btn-primary {
        background: linear-gradient(135deg, #4caf50 0%, #388e3c 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
        }

    .btn-secondary {
        background: linear-gradient(135deg, #9e9e9e 0%, #757575 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(158, 158, 158, 0.3);
    }

        .btn-secondary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(158, 158, 158, 0.4);
        }

    .btn-success {
        background: linear-gradient(135deg, #66bb6a 0%, #4caf50 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(102, 187, 106, 0.3);
    }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 187, 106, 0.4);
        }

    .btn-warning {
        background: linear-gradient(135deg, #ffb74d 0%, #ff9800 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(255, 183, 77, 0.3);
    }

        .btn-warning:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 183, 77, 0.4);
        }

    .btn-danger {
        background: linear-gradient(135deg, #ef5350 0%, #f44336 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(239, 83, 80, 0.3);
    }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(239, 83, 80, 0.4);
        }

    .btn-info {
        background: linear-gradient(135deg, #29b6f6 0%, #0288d1 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(41, 182, 246, 0.3);
    }

        .btn-info:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(41, 182, 246, 0.4);
        }

    .btn-sm {
        padding: 8px 14px;
        font-size: 0.8rem;
    }

    .question-navigation {
        background: white;
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        border: 2px solid #e8f5e9;
    }

    .question-buttons {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 8px;
        margin-bottom: 15px;
    }

    .question-btn {
        background: linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%);
        border: 2px solid #4caf50;
        border-radius: 8px;
        padding: 8px 12px;
        font-size: 0.8rem;
        font-weight: 600;
        color: #2e7d32;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: center;
    }

        .question-btn:hover {
            background: linear-gradient(135deg, #4caf50 0%, #388e3c 100%);
            color: white;
            transform: translateY(-1px);
        }

        .question-btn.active {
            background: linear-gradient(135deg, #4caf50 0%, #388e3c 100%);
            color: white;
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        }

    .control-buttons {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
        margin-bottom: 20px;
    }

    .navigation-buttons {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin-bottom: 15px;
    }

    .round-indicator {
        background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);
        border: 2px solid #ffb74d;
        border-radius: 10px;
        padding: 12px 15px;
        text-align: center;
        margin-bottom: 15px;
        font-weight: 700;
        color: #e65100;
    }

    @@media (max-width: 1200px) {
        .main-content {
            grid-template-columns: 1fr;
        }

        .control-buttons {
            grid-template-columns: 1fr;
        }

        .options-grid {
            grid-template-columns: 1fr;
        }

        .question-buttons {
            grid-template-columns: repeat(3, 1fr);
        }
    }

    @@media (max-width: 768px) {
        .page-header h2 {
            font-size: 1.6rem;
        }

        .container {
            padding: 15px;
        }

        .question-buttons {
            grid-template-columns: repeat(2, 1fr);
        }
    }
</style>

<div class="container">
    <div class="page-header">
        <h2>üéÆ ƒêi·ªÅu khi·ªÉn v√≤ng thi Olympia</h2>
        <p style="margin: 8px 0 0 0; opacity: 0.9; font-size: 1rem;">Qu·∫£n l√Ω v√† ƒëi·ªÅu khi·ªÉn cu·ªôc thi tr·ª±c ti·∫øp</p>
    </div>

    <div class="main-content">
        <div class="question-panel">
            <div class="panel-title">
                üìÑ Th√¥ng tin c√¢u h·ªèi
            </div>

            <div class="info-grid">
                <div class="info-item">
                    <div class="info-label">V√≤ng hi·ªán t·∫°i</div>
                    <div class="info-value" id="questionNumber">--</div>
                </div>
                <div class="info-item">
                    <div class="info-label">ƒê√°p √°n ƒë√∫ng</div>
                    <div class="info-value" id="correctAnswer">--</div>
                </div>
            </div>

            <div id="questionContent" class="question-content">
                [C√¢u h·ªèi s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y]
            </div>

            <div id="answerOptions" class="options-grid"></div>

            <div class="info-item">
                <div class="info-label">L·ªùi gi·∫£i</div>
                <div class="info-value" id="explanation">--</div>
            </div>
        </div>

        <div class="control-panel">
            <div class="panel-title">
                üéõÔ∏è ƒêi·ªÅu khi·ªÉn
            </div>

            <div class="round-indicator">
                üèÜ V√≤ng <span id="currentRoundDisplay">1</span> / 10
            </div>

            <div class="question-navigation">
                <div class="panel-title" style="margin-bottom: 15px;">
                    üî¢ ƒêi·ªÅu h∆∞·ªõng c√¢u h·ªèi
                </div>

                <div id="questionButtons" class="question-buttons"></div>

                <div class="navigation-buttons">
                    <button onclick="prevQuestion()" class="btn btn-sm btn-secondary">‚¨ÖÔ∏è L√πi l·∫°i</button>
                    <button onclick="nextQuestion()" class="btn btn-sm btn-secondary">‚û°Ô∏è Ti·∫øp theo</button>
                </div>
            </div>

            <div class="control-buttons">
                <button onclick="startRound()" class="btn btn-primary">üöÄ B·∫Øt ƒë·∫ßu v√≤ng 1</button>
                <button onclick="startTimer()" class="btn btn-success">‚è± B·∫Øt ƒë·∫ßu l√†m b√†i</button>
                <button onclick="nextQuestion()" class="btn btn-info">‚û°Ô∏è Chuy·ªÉn c√¢u ti·∫øp theo</button>
                <button onclick="showAnswer()" class="btn btn-warning">üëÅÔ∏è Hi·ªán l·ªùi gi·∫£i</button>
                <button onclick="endRound()" class="btn btn-danger">‚õî K·∫øt th√∫c v√≤ng thi</button>
                <button onclick="showStudentResults()" class="btn btn-info">üìä K·∫øt qu·∫£ th√≠ sinh</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.socket.io/4.6.1/socket.io.min.js"></script>
<script>
    const socket = io("http://localhost:3000");

    let currentRound = 1;
    let currentIndex = 0;

    // T·∫°o n√∫t c√¢u h·ªèi 1-10
    function createQuestionButtons() {
        const container = document.getElementById("questionButtons");
        container.innerHTML = "";

        for (let i = 1; i <= 10; i++) {
            const btn = document.createElement("button");
            btn.className = "question-btn";
            btn.textContent = i;
            btn.onclick = () => goToQuestion(i);
            container.appendChild(btn);
        }
    }

    function goToQuestion(round) {
        currentRound = round;
        currentIndex = 0;
        updateQuestionButtons();
        socket.emit("clear-student-summary");
        socket.emit("show-question", currentRound);
        loadQuestion(currentRound, currentIndex);
    }

    function updateQuestionButtons() {
        const buttons = document.querySelectorAll('.question-btn');
        buttons.forEach((btn, index) => {
            btn.classList.remove('active');
            if (index + 1 === currentRound) {
                btn.classList.add('active');
            }
        });
        document.getElementById("currentRoundDisplay").textContent = currentRound;
    }

    function startRound() {
        currentRound = 1;
        currentIndex = 0;
        socket.emit("start-round", currentRound);
        socket.emit("show-question", currentRound);
        loadQuestion(currentRound, currentIndex);
        updateQuestionButtons();
    }

    function startTimer() {
        fetch(`http://localhost:3000/api/questions/question/${currentRound}/${currentIndex}`)
            .then(res => res.json())
            .then(q => {
                socket.emit("start-timer", {
                    round: currentRound,
                    questionId: q.QuestionId
                });
            });
    }

    function prevQuestion() {
        if (currentRound > 1) {
            currentRound--;
            currentIndex = 0;
            socket.emit("clear-student-summary");
            socket.emit("show-question", currentRound);
            loadQuestion(currentRound, currentIndex);
            updateQuestionButtons();
        }
    }

    function nextQuestion() {
        if (currentRound < 10) {
            currentRound++;
            currentIndex = 0;
            socket.emit("clear-student-summary");
            socket.emit("show-question", currentRound);
            loadQuestion(currentRound, currentIndex);
            updateQuestionButtons();
        }
    }

    socket.on("show-question", async (round) => {
        currentRound = round;
        currentIndex = 0;
        await loadQuestion(currentRound, currentIndex);
        updateQuestionButtons();
    });

    async function loadQuestion(round, index) {
        try {
            const res = await fetch(`http://localhost:3000/api/questions/question/${round}/${index}`);
            if (!res.ok) {
                document.getElementById("questionContent").innerText = "Kh√¥ng t·∫£i ƒë∆∞·ª£c c√¢u h·ªèi.";
                return;
            }

            const q = await res.json();
            document.getElementById("questionNumber").innerText = round;
            document.getElementById("questionContent").innerText = q.Content;

            const div = document.getElementById("answerOptions");
            div.innerHTML = ["A", "B", "C", "D"].map(opt => `
                <div class="option-item">
                    <strong>${opt}:</strong> ${q["Option" + opt]}
                </div>
            `).join("");

            document.getElementById("correctAnswer").innerText = "--";
            document.getElementById("explanation").innerText = "--";
        } catch (error) {
            console.error("Error loading question:", error);
            document.getElementById("questionContent").innerText = "L·ªói khi t·∫£i c√¢u h·ªèi.";
        }
    }

    function showAnswer() {
        fetch(`http://localhost:3000/api/questions/question/${currentRound}/${currentIndex}`)
            .then(res => res.json())
            .then(q => {
                // Hi·ªÉn th·ªã tr√™n giao di·ªán admin
                document.getElementById("correctAnswer").innerText = q.CorrectAnswer;
                document.getElementById("explanation").innerText = q.Explanation;

                // G·ª≠i socket cho th√≠ sinh
                socket.emit("show-answer", {
                    correctAnswer: q.CorrectAnswer,
                    explanation: q.Explanation,
                    round: currentRound
                });
            });
    }

    function endRound() {
        socket.emit("round-ended", currentRound);
        alert("V√≤ng " + currentRound + " ƒë√£ k·∫øt th√∫c!");
    }

    function showStudentResults() {
        socket.emit("get-student-results");
    }

    // Kh·ªüi t·∫°o giao di·ªán
    createQuestionButtons();
    updateQuestionButtons();
</script>