@{
    ViewBag.Title = "MC - Vòng thi";
}

<style>
    body {
        background: linear-gradient(135deg, #f8f9fa 0%, #e8f5e9 100%);
        min-height: 100vh;
        font-family: 'Roboto', sans-serif;
    }

    .mc-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .mc-header {
        background: white;
        border-radius: 20px;
        padding: 30px;
        margin-bottom: 30px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
        border-left: 5px solid #4caf50;
    }

    .welcome-text {
        color: #2e7d32;
        font-size: 1.3rem;
        font-weight: 600;
        margin-bottom: 10px;
    }

    .round-title {
        color: #2e7d32;
        font-size: 2.5rem;
        font-weight: 800;
        text-align: center;
        margin-bottom: 20px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .question-container {
        background: white;
        border-radius: 20px;
        padding: 40px;
        margin-bottom: 30px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
        border: 3px solid transparent;
        transition: all 0.3s ease;
    }

        .question-container:hover {
            border-color: #4caf50;
            transform: translateY(-2px);
        }

    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 2px solid #e8f5e9;
    }

    .question-number {
        background: linear-gradient(135deg, #4caf50 0%, #2e7d32 100%);
        color: white;
        padding: 15px 25px;
        border-radius: 50px;
        font-size: 1.2rem;
        font-weight: 700;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }

    .timer-container {
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
        color: white;
        padding: 15px 25px;
        border-radius: 50px;
        font-size: 1.2rem;
        font-weight: 700;
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
        animation: pulse 1s infinite;
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.05);
        }

        100% {
            transform: scale(1);
        }
    }

    .question-text {
        font-size: 1.4rem;
        color: #2e7d32;
        font-weight: 600;
        line-height: 1.6;
        margin-bottom: 30px;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 15px;
        border-left: 5px solid #4caf50;
    }

    .answers-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .answer-button {
        background: white;
        border: 3px solid #e8f5e9;
        color: #2e7d32;
        padding: 20px 25px;
        border-radius: 15px;
        font-size: 1.1rem;
        font-weight: 600;
        text-align: left;
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

        .answer-button:hover:not(:disabled) {
            border-color: #4caf50;
            background: #e8f5e9;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(76, 175, 80, 0.2);
        }

        .answer-button:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

        .answer-button.correct-answer {
            border: 3px solid #4caf50 !important;
            background: linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%) !important;
            color: #2e7d32 !important;
            font-weight: bold;
            animation: correctPulse 0.5s ease-in-out;
        }

    @@keyframes correctPulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.05);
        }

        100% {
            transform: scale(1);
        }
    }

    .explanation-box {
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        border: 2px solid #2196f3;
        border-radius: 15px;
        padding: 20px;
        margin-top: 20px;
        color: #1565c0;
        font-style: italic;
        font-weight: 500;
        box-shadow: 0 4px 15px rgba(33, 150, 243, 0.2);
    }

    .status-indicator {
        background: white;
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        text-align: center;
    }

    .status-text {
        color: #666;
        font-size: 1.1rem;
        font-weight: 500;
    }

    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid #e8f5e9;
        border-radius: 50%;
        border-top-color: #4caf50;
        animation: spin 1s ease-in-out infinite;
        margin-right: 10px;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    .round-info {
        background: linear-gradient(135deg, #4caf50 0%, #2e7d32 100%);
        color: white;
        padding: 20px;
        border-radius: 15px;
        margin-bottom: 20px;
        text-align: center;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }

        .round-info h3 {
            margin: 0;
            font-size: 1.3rem;
            font-weight: 700;
        }

    @@media (max-width: 768px) {
        .mc-container {
            padding: 10px;
        }

        .question-container {
            padding: 20px;
        }

        .question-header {
            flex-direction: column;
            gap: 15px;
        }

        .answers-grid {
            grid-template-columns: 1fr;
        }

        .question-text {
            font-size: 1.2rem;
        }
    }
</style>

<div class="mc-container">
    <!-- Header Section -->
    <div class="mc-header">
        <div class="welcome-text">
            <i class="fas fa-user-circle"></i>
            Chào mừng, @(Session["FullName"] ?? "MC")!
        </div>
        <h1 class="round-title">
            <i class="fas fa-trophy"></i> MC - Điều khiển vòng thi
        </h1>
    </div>

    <!-- Round Information -->
    <div class="round-info">
        <h3><i class="fas fa-info-circle"></i> Thông tin vòng thi</h3>
        <p>Hệ thống đang sẵn sàng điều khiển cuộc thi Olympic Tiếng Anh THCS</p>
    </div>

    <!-- Question Container -->
    <div class="question-container">
        <div class="question-header">
            <div class="question-number">
                <i class="fas fa-question-circle"></i> Câu hỏi <span id="questionIndex">--</span>/10
            </div>
            <div class="timer-container">
                <i class="fas fa-clock"></i> Thời gian: <span id="timer">--</span>s
            </div>
        </div>

        <div class="question-text" id="questionText">
            <i class="fas fa-spinner loading-spinner"></i> Đang chờ bắt đầu vòng thi...
        </div>

        <div class="answers-grid" id="answerList">
            <!-- Answer buttons will be dynamically generated here -->
        </div>

        <div class="explanation-box" id="explanationBox" style="display:none;">
            <i class="fas fa-lightbulb"></i> <span id="explanationText"></span>
        </div>
    </div>

    <!-- Status Indicator -->
    <div class="status-indicator">
        <div class="status-text">
            <i class="fas fa-broadcast-tower"></i> Trạng thái: Đang kết nối với máy chủ
        </div>
    </div>
</div>

<script src="https://cdn.socket.io/4.6.1/socket.io.min.js"></script>
<script>
    const socket = io("http://localhost:3000");
    const userId = @Session["UserId"];

    let currentRound = 0;
    let currentIndex = 0;
    let currentQuestionId = null;
    let timerInterval;
    let correctAnswer = null;

    socket.emit("join-room", userId);

    socket.on('round-started', async (round) => {
        currentRound = round;
        currentIndex = 0;
        updateStatus(`Vòng ${round} đã bắt đầu!`);
        await loadQuestion(currentRound);
    });

    socket.on('show-question', async (round) => {
        currentRound = round;
        currentIndex = 0;
        updateStatus(`Hiển thị câu hỏi vòng ${round}`);
        await loadQuestion(currentRound);
    });

    socket.on("start-timer", ({ round, questionId }) => {
        if (round === currentRound) {
            currentQuestionId = questionId;
            updateStatus(`Bắt đầu đếm ngược cho câu hỏi ${questionId}`);
            startTimer(15, currentQuestionId);
        }
    });

    function updateStatus(message) {
        document.querySelector('.status-text').innerHTML =
            `<i class="fas fa-broadcast-tower"></i> ${message}`;
    }

    async function loadQuestion(round) {
        clearInterval(timerInterval);
        try {
            const res = await fetch(`http://localhost:3000/api/questions/question/${round}/0`);
            if (!res.ok) {
                document.getElementById("questionText").innerHTML =
                    '<i class="fas fa-exclamation-triangle" style="color: #f44336;"></i> Không tải được câu hỏi.';
                return;
            }

            const q = await res.json();
            currentQuestionId = q.QuestionId;
            correctAnswer = q.CorrectAnswer;

            document.getElementById("questionIndex").innerText = round;
            document.getElementById("questionText").innerHTML =
                `<i class="fas fa-question-circle"></i> ${q.Content}`;

            const container = document.getElementById("answerList");
            container.innerHTML = ["A", "B", "C", "D"].map(opt => `
                <button id="btn_${opt}" class="answer-button" disabled>
                    <strong>${opt}:</strong> ${q["Option" + opt]}
                </button>
            `).join("");

            document.getElementById("timer").innerText = "--";
            document.getElementById("explanationBox").style.display = "none";

            updateStatus(`Đã tải câu hỏi vòng ${round}`);
        } catch (err) {
            console.error("❌ Lỗi khi tải câu hỏi:", err);
            document.getElementById("questionText").innerHTML =
                '<i class="fas fa-exclamation-triangle" style="color: #f44336;"></i> Lỗi khi tải câu hỏi.';
        }
    }

    function startTimer(seconds, questionId) {
        clearInterval(timerInterval);
        let timeLeft = seconds;
        document.getElementById("timer").innerText = timeLeft;

        timerInterval = setInterval(() => {
            timeLeft--;
            document.getElementById("timer").innerText = timeLeft;

            if (timeLeft <= 5) {
                document.querySelector('.timer-container').style.background =
                    'linear-gradient(135deg, #ff4444 0%, #cc0000 100%)';
            }

            if (timeLeft <= 0) {
                clearInterval(timerInterval);

                fetch(`http://localhost:3000/api/questions/question/${currentRound}/${currentIndex}`)
                    .then(res => res.json())
                    .then(q => {
                        socket.emit("show-answer", {
                            correctAnswer: q.CorrectAnswer,
                            explanation: q.Explanation,
                            round: currentRound
                        });
                    });
            }
        }, 1000);
    }

    socket.on("show-answer", ({ round, correctAnswer, explanation }) => {
        if (round === currentRound) {
            const correctBtn = document.getElementById("btn_" + correctAnswer);
            if (correctBtn) {
                correctBtn.classList.add("correct-answer");
            }

            document.getElementById("explanationText").innerHTML =
                `<strong>�� Lời giải:</strong> ${explanation}`;
            document.getElementById("explanationBox").style.display = "block";

            updateStatus(`Đã hiển thị đáp án đúng: ${correctAnswer}`);
        }
    });

    socket.on("round-ended", (round) => {
        updateStatus(`Vòng ${round} đã kết thúc!`);
        setTimeout(() => {
            alert(`⏹ Vòng ${round} đã kết thúc!`);
        }, 500);
    });

    socket.on("display-results", () => {
        updateStatus("Đang hiển thị kết quả tổng kết...");
        setTimeout(() => {
            alert("📊 Tổng kết điểm sẽ hiển thị ở đây!");
        }, 500);
    });

    // Connection status
    socket.on('connect', () => {
        updateStatus('Đã kết nối với máy chủ');
    });

    socket.on('disconnect', () => {
        updateStatus('Mất kết nối với máy chủ');
    });
</script>